name: Run Tests

on:
  push:
    branches:
      - "**"
      - "!master"

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Docker and Docker Compose
        run: |
          # Установка Docker
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu noble stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Установка Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Backend
        working-directory: ./api_tests/backend
        run: |
          # Запускаем сервисы в фоновом режиме
          docker-compose up --build -d

          # Ждем пока postgres станет healthy (исправленный синтаксис)
          echo "Waiting for postgres to become healthy..."
          timeout 120s bash -c 'while [[ -z "$(docker-compose ps -q postgres)" ]] || [[ "$(docker inspect -f '\''{{.State.Health.Status}}'\'' $(docker-compose ps -q postgres))" != "healthy" ]]; do sleep 5; done'

          # Ждем пока основной сервис запустится
          echo "Waiting for service to start..."
          timeout 60s bash -c 'until curl -s http://localhost:8080/healthcheck >/dev/null; do sleep 3; done'

          # Дополнительная диагностика
          echo "Current containers state:"
          docker-compose ps
          echo "Service logs:"
          docker-compose logs service --tail=50

      - name: Check backend health
        working-directory: ./api_tests/backend
        run: |
          # Проверяем healthcheck (используем порт 8080 как указано в compose)
          echo "Checking service healthcheck at localhost:8080"
          curl -v --retry 5 --retry-delay 3 --retry-all-errors http://localhost:8080/healthcheck

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist allure-pytest

      - name: Run API Tests
        run: |
          python -m pytest api_tests/tests/ \
            -n auto \
            --alluredir=./allure-results-api

      - name: Upload API reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-reports
          path: ./allure-results-api/

      - name: Stop Backend
        if: always()
        working-directory: ./api_tests/backend
        run: docker-compose down

  ui-tests:
    needs: api-tests  # Запускаем после API тестов (можно убрать, если нужно параллельно)
    runs-on: ubuntu-latest
    container:
      image: selenium/standalone-chrome:latest
      options: --shm-size=2g

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-html

      - name: Run UI Tests
        run: |
          python -m pytest ui_tests/tests/ \
            -n auto \
            --html=ui-report.html \
            --self-contained-html

      - name: Upload UI reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-reports
          path: ui-report.html