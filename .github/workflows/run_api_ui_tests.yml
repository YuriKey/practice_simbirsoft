name: Run Tests

on:
  push:
    branches:
      - "**"
      - "!master"

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu noble stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Backend
        working-directory: ./api_tests/backend
        run: |
          docker-compose up --build -d
          timeout 120s bash -c 'while [[ -z "$(docker-compose ps -q postgres)" ]] || [[ "$(docker inspect -f '\''{{.State.Health.Status}}'\'' $(docker-compose ps -q postgres))" != "healthy" ]]; do sleep 5; done'
          timeout 60s bash -c 'until curl -s http://localhost:8080/healthcheck >/dev/null; do sleep 3; done'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-html

      - name: Run API Tests
        run: |
          python -m pytest api_tests/tests/ \
            -n auto \
            --html=api_tests_report.html \
            --self-contained-html

      - name: Upload API report
        uses: actions/upload-artifact@v4
        with:
          name: api_tests_report
          path: api_tests_report.html

      - name: Cleanup Docker
        if: always()
        working-directory: ./api_tests/backend
        run: |
          docker-compose down -v --remove-orphans
          docker system prune -a -f

  ui-tests:
    needs: api-tests
    runs-on: ubuntu-latest
    steps:
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: src

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: src
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-html selenium webdriver-manager

      - name: Run UI Tests
        working-directory: src
        run: |
          python -m pytest ui_tests/tests/ \
            -n auto \
            --html=ui_tests_report.html \
            --self-contained-html

      - name: Upload UI report
        uses: actions/upload-artifact@v4
        with:
          name: ui_tests_report
          path: src/ui_tests_report.html